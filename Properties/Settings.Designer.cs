//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeBuilder.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Server=.\\SQLEXPRESS;Database=ECMS;Trusted_Connection=True;")]
        public string strConn {
            get {
                return ((string)(this["strConn"]));
            }
            set {
                this["strConn"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("命名空间")]
        public string strNamespace {
            get {
                return ((string)(this["strNamespace"]));
            }
            set {
                this["strNamespace"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("双击此处选择文件导出路径...")]
        public string strPath {
            get {
                return ((string)(this["strPath"]));
            }
            set {
                this["strPath"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System;\r\nusing System.Collections.Generic;\r\nusing System.Data.SqlClient;\r\nu" +
            "sing System.Text;\r\nnamespace Helper\r\n{\r\n    public static class GenericSQLGenera" +
            "tor\r\n    {\r\n        public static string GetWhereStr<T>(T entity, string tableNa" +
            "me, out List<SqlParameter> list, params string[] fields) where T : new()\r\n      " +
            "  {\r\n            StringBuilder sbu = new StringBuilder();\r\n            list = ne" +
            "w List<SqlParameter>();\r\n\r\n            sbu.Append(\"\");\r\n            sbu.Append(\"" +
            "select * from \" + tableName + \" where (1=1)\");\r\n            if (fields != null)\r" +
            "\n            {\r\n                //遍历每一个要生成SQL的字段，取出内容\r\n                foreach (" +
            "string field in fields)\r\n                {\r\n                    object value = e" +
            "ntity.GetType().GetProperty(field).GetValue(entity, null);\r\n                    " +
            "if (value is int || value is double || value is decimal || value is double || va" +
            "lue is long || value is float)\r\n                    {\r\n\r\n                       " +
            " sbu.AppendFormat(\" and ({0}=@{0})\", field);\r\n                        list.Add(n" +
            "ew SqlParameter(\"@\" + field + \"\", value));\r\n\r\n                    }\r\n           " +
            "         else if (value is DateTime)\r\n                    {\r\n                   " +
            "     sbu.AppendFormat(\" and ({0}=@{0})\", field);\r\n                        list.A" +
            "dd(new SqlParameter(\"@\" + field + \"\", Convert.ToDateTime(value)));\r\n\r\n          " +
            "          }\r\n                    else if (value is Guid)\r\n                    {\r" +
            "\n                        sbu.AppendFormat(\" and ({0}=@{0})\", field);\r\n          " +
            "              list.Add(new SqlParameter(\"@\" + field + \"\", new Guid(value.ToStrin" +
            "g())));\r\n\r\n                    }\r\n                    else if (value is Boolean)" +
            "\r\n                    {\r\n                        sbu.AppendFormat(\" and ({0}=@{0" +
            "})\", field);\r\n                        list.Add(new SqlParameter(\"@\" + field + \"\"" +
            ", Convert.ToBoolean(value)));\r\n\r\n                    }\r\n                    else" +
            "\r\n                    {\r\n                        sbu.AppendFormat(\" and ({0}=@{0" +
            "})\", field);\r\n                        list.Add(new SqlParameter(\"@\" + field + \"\"" +
            ", Convert.ToString(value)));\r\n\r\n                    }\r\n                }\r\n      " +
            "      }\r\n            return (sbu.ToString());\r\n        }\r\n    }\r\n}")]
        public string GenericSQLGeneratorHelper {
            get {
                return ((string)(this["GenericSQLGeneratorHelper"]));
            }
            set {
                this["GenericSQLGeneratorHelper"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
            "m.Text;\r\nusing System.Configuration;\r\nusing System.Data.SqlClient;\r\nusing System" +
            ".Data;\r\n\r\nnamespace Helper\r\n{\r\n    public static class  SqlHelper\r\n    {\r\n      " +
            "  public static readonly string connstr =\r\n            ConfigurationManager.Conn" +
            "ectionStrings[\"connstr\"].ConnectionString;\r\n\r\n        public static SqlConnectio" +
            "n OpenConnection()\r\n        {\r\n            SqlConnection conn = new SqlConnectio" +
            "n(connstr);\r\n            conn.Open();\r\n            return conn;\r\n        }\r\n\r\n  " +
            "      public static int ExecuteNonQuery(string cmdText,\r\n            params SqlP" +
            "arameter[] parameters)\r\n        {\r\n            using (SqlConnection conn = new S" +
            "qlConnection(connstr))\r\n            {\r\n                conn.Open();\r\n           " +
            "     return ExecuteNonQuery(conn, cmdText, parameters);\r\n            }\r\n        " +
            "}\r\n\r\n        public static object ExecuteScalar(string cmdText,\r\n            par" +
            "ams SqlParameter[] parameters)\r\n        {\r\n            using (SqlConnection conn" +
            " = new SqlConnection(connstr))\r\n            {\r\n                conn.Open();\r\n   " +
            "             return ExecuteScalar(conn, cmdText, parameters);\r\n            }\r\n  " +
            "      }\r\n\r\n        public static DataTable ExecuteDataTable(string cmdText,\r\n   " +
            "         params SqlParameter[] parameters)\r\n        {\r\n            using (SqlCon" +
            "nection conn = new SqlConnection(connstr))\r\n            {\r\n                conn." +
            "Open();\r\n                return ExecuteDataTable(conn, cmdText, parameters);\r\n  " +
            "          }\r\n        }\r\n\r\n        public static int ExecuteNonQuery(SqlConnectio" +
            "n conn,string cmdText,\r\n           params SqlParameter[] parameters)\r\n        {\r" +
            "\n            using (SqlCommand cmd = conn.CreateCommand())\r\n            {\r\n     " +
            "           cmd.CommandText = cmdText;\r\n                cmd.Parameters.AddRange(p" +
            "arameters);\r\n                return cmd.ExecuteNonQuery();\r\n            }\r\n     " +
            "   }\r\n\r\n        public static object ExecuteScalar(SqlConnection conn, string cm" +
            "dText,\r\n            params SqlParameter[] parameters)\r\n        {\r\n            us" +
            "ing (SqlCommand cmd = conn.CreateCommand())\r\n            {\r\n                cmd." +
            "CommandText = cmdText;\r\n                cmd.Parameters.AddRange(parameters);\r\n  " +
            "              return cmd.ExecuteScalar();\r\n            }\r\n        }\r\n\r\n        p" +
            "ublic static DataTable ExecuteDataTable(SqlConnection conn, string cmdText,\r\n   " +
            "         params SqlParameter[] parameters)\r\n        {\r\n            using (SqlCom" +
            "mand cmd = conn.CreateCommand())\r\n            {\r\n                cmd.CommandText" +
            " = cmdText;\r\n                cmd.Parameters.AddRange(parameters);\r\n             " +
            "   using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))\r\n                {\r\n" +
            "                    DataTable dt = new DataTable();\r\n                    adapter" +
            ".Fill(dt);\r\n                    return dt;\r\n                }\r\n            }\r\n  " +
            "      }\r\n\r\n        public static object ToDBValue(this object value)\r\n        {\r" +
            "\n            return value == null ? DBNull.Value : value;\r\n        }\r\n\r\n        " +
            "public static object FromDBValue(this object dbValue)\r\n        {\r\n            re" +
            "turn dbValue == DBNull.Value ? null : dbValue;\r\n        }\r\n    }\r\n}\r\n")]
        public string SqlHelper {
            get {
                return ((string)(this["SqlHelper"]));
            }
            set {
                this["SqlHelper"] = value;
            }
        }
    }
}
