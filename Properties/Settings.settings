<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="CodeBuilder.Properties" GeneratedClassName="Settings">
  <Profiles />
  <Settings>
    <Setting Name="strConn" Type="System.String" Scope="User">
      <Value Profile="(Default)">Server=.\SQLEXPRESS;Database=ECMS;Trusted_Connection=True;</Value>
    </Setting>
    <Setting Name="strNamespace" Type="System.String" Scope="User">
      <Value Profile="(Default)">命名空间</Value>
    </Setting>
    <Setting Name="strPath" Type="System.String" Scope="User">
      <Value Profile="(Default)">双击此处选择文件导出路径...</Value>
    </Setting>
    <Setting Name="GenericSQLGeneratorHelper" Type="System.String" Scope="User">
      <Value Profile="(Default)">using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;
namespace Helper
{
    public static class GenericSQLGenerator
    {
        public static string GetWhereStr&lt;T&gt;(T entity, string tableName, out List&lt;SqlParameter&gt; list, params string[] fields) where T : new()
        {
            StringBuilder sbu = new StringBuilder();
            list = new List&lt;SqlParameter&gt;();

            sbu.Append("");
            sbu.Append("select * from " + tableName + " where (1=1)");
            if (fields != null)
            {
                //遍历每一个要生成SQL的字段，取出内容
                foreach (string field in fields)
                {
                    object value = entity.GetType().GetProperty(field).GetValue(entity, null);
                    if (value is int || value is double || value is decimal || value is double || value is long || value is float)
                    {

                        sbu.AppendFormat(" and ({0}=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", value));

                    }
                    else if (value is DateTime)
                    {
                        sbu.AppendFormat(" and ({0}=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", Convert.ToDateTime(value)));

                    }
                    else if (value is Guid)
                    {
                        sbu.AppendFormat(" and ({0}=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", new Guid(value.ToString())));

                    }
                    else if (value is Boolean)
                    {
                        sbu.AppendFormat(" and ({0}=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", Convert.ToBoolean(value)));

                    }
                    else
                    {
                        sbu.AppendFormat(" and ({0}=@{0})", field);
                        list.Add(new SqlParameter("@" + field + "", Convert.ToString(value)));

                    }
                }
            }
            return (sbu.ToString());
        }
    }
}</Value>
    </Setting>
    <Setting Name="SqlHelper" Type="System.String" Scope="User">
      <Value Profile="(Default)">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using System.Data.SqlClient;
using System.Data;

namespace Helper
{
    public static class  SqlHelper
    {
        public static readonly string connstr =
            ConfigurationManager.ConnectionStrings["connstr"].ConnectionString;

        public static SqlConnection OpenConnection()
        {
            SqlConnection conn = new SqlConnection(connstr);
            conn.Open();
            return conn;
        }

        public static int ExecuteNonQuery(string cmdText,
            params SqlParameter[] parameters)
        {
            using (SqlConnection conn = new SqlConnection(connstr))
            {
                conn.Open();
                return ExecuteNonQuery(conn, cmdText, parameters);
            }
        }

        public static object ExecuteScalar(string cmdText,
            params SqlParameter[] parameters)
        {
            using (SqlConnection conn = new SqlConnection(connstr))
            {
                conn.Open();
                return ExecuteScalar(conn, cmdText, parameters);
            }
        }

        public static DataTable ExecuteDataTable(string cmdText,
            params SqlParameter[] parameters)
        {
            using (SqlConnection conn = new SqlConnection(connstr))
            {
                conn.Open();
                return ExecuteDataTable(conn, cmdText, parameters);
            }
        }

        public static int ExecuteNonQuery(SqlConnection conn,string cmdText,
           params SqlParameter[] parameters)
        {
            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                return cmd.ExecuteNonQuery();
            }
        }

        public static object ExecuteScalar(SqlConnection conn, string cmdText,
            params SqlParameter[] parameters)
        {
            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                return cmd.ExecuteScalar();
            }
        }

        public static DataTable ExecuteDataTable(SqlConnection conn, string cmdText,
            params SqlParameter[] parameters)
        {
            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = cmdText;
                cmd.Parameters.AddRange(parameters);
                using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    adapter.Fill(dt);
                    return dt;
                }
            }
        }

        public static object ToDBValue(this object value)
        {
            return value == null ? DBNull.Value : value;
        }

        public static object FromDBValue(this object dbValue)
        {
            return dbValue == DBNull.Value ? null : dbValue;
        }
    }
}
</Value>
    </Setting>
  </Settings>
</SettingsFile>